trigger:
  branches:
    include:
    - master
    - refs/tags/*

pr:
- dev/jaredpar/*
- master

# Standard CI loop (build and test). This will run against VS2017 and VS2019
jobs:
- job: macOS
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - script: VERSION_TAG=`git describe --tags` && echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
    displayName: Set the tag name as an environment variable
  - script: EXTENSION_VERSION=`grep Version Src/VimMac/Properties/AddinInfo.cs | cut -d "\"" -f2` && echo "##vso[task.setvariable variable=EXTENSION_VERSION]$EXTENSION_VERSION"
    displayName: Set the version number of the extension as an environment variable

  - task: Bash@3
    displayName: Build 
    inputs:
      filePath: Scripts/build.sh

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: Binaries/Debug/VimMac/net472/Vim.Mac.VsVim_$(EXTENSION_VERSION).mpack
      artifactName: VSMacExtension

  - task: GitHubRelease@0
    condition: and(startsWith(variables['build.sourceBranch'], 'refs/tags/'), contains(variables['build.sourceBranch'], 'vsm'))
    inputs:
      displayName: 'Release VS Mac extension'
      gitHubConnection: automationConnection
      repositoryName: '$(Build.Repository.Name)' 
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'auto'
      title: 'Visual Studio for Mac $(VERSION_TAG)'
      assets: Binaries/Debug/VimMac/net472/Vim.Mac.VsVim_$(EXTENSION_VERSION).mpack
      assetUploadMode: 'replace'
      isDraft: false

- job: VsVim_Build_Test
  pool: 
    vmImage: 'vs2017-win2016'

  strategy:
    maxParallel: 3
    matrix:
      Vs2015:
        _testConfig: 14.0
        _name: Vs2015
      Vs2017:
        _testConfig: 15.0
        _name: Vs2017
      Vs2019:
        _testConfig: 16.0
        _name: Vs2019

  steps:

  - task: PowerShell@2
    displayName: Build 
    inputs:
      filePath: Scripts\Build.ps1
      arguments: -ci -config Debug -build -testConfig $(_testConfig)

  - task: PowerShell@2
    displayName: Test
    inputs:
      filePath: Scripts\Build.ps1
      arguments: -ci -config Debug -test

  - task: PowerShell@2
    displayName: Test Extra
    inputs:
      filePath: Scripts\Build.ps1
      arguments: -ci -config Debug -testExtra

  - task: PublishPipelineArtifact@0
    displayName: Publish Logs
    inputs:
      targetPath: '$(Build.SourcesDirectory)\Binaries\Logs'
      artifactName: 'Logs $(_name)'
    condition: always()

  - task: PublishTestResults@2
    displayName: Publish xUnit Test Results
    inputs:
      testRunner: XUnit
      testResultsFiles: '$(Build.SourcesDirectory)\Binaries\xUnitResults\*.xml'
      mergeTestResults: true
      testRunTitle: 'VsVim Test Results $(_name)'
    condition: always()

# This job is meant for building a Release VSIX for consumption and 
# publishing it to two locations:
#   - An Azure DevOps artifact for easy download / use on PR or CI
#   - The Open VSIX gallery during CI
- job: Produce_Vsix
  pool: 
    vmImage: 'vs2017-win2016'

  steps:
  - task: PowerShell@2
    displayName: Build 
    inputs:
      filePath: Scripts\Build.ps1
      arguments: -ci -build -updateVsixVersion -config Release

  - task: PublishPipelineArtifact@0
    displayName: Publish Vsix 
    inputs:
      targetPath: '$(Build.SourcesDirectory)\Binaries\Deploy'
      artifactName: 'Vsix'

  - task: PowerShell@2
    displayName: Publish to Open VSIX Gallery
    inputs:
      filePath: Scripts\Build.ps1
      arguments: -ci -uploadVsix -config Release
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

